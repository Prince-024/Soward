from core.Apolex import Apolex, OWNER_IDS
import ast
import inspect
from cogs.antiraid import AntiRaid
from lib2to3.pgen2 import token
import re
from click import command
import discord, datetime
from discord.ext import commands
import os

os.system("pip install httpx")
os.system("pip install aiohttp")
import json
import subprocess
import asyncio
import traceback
import sys
import ast
from otherscipts.data import Data
from cogs.serversettings import ServerSettings
from discord.utils import get
import os
import dismusic
import httpx
import random
import asyncio
from discord.ext import commands, tasks
import webserver
from webserver import keep_alive
from main1 import add_server, all_servers, get_server, delete_server, get_greet, add_greet, remove_greet, get_users, add_user, add_money, share_money, get_info, give_money, remove_money, add_inventory, update_greet, remove_code, add_code, get_codes, get_premiumservers, add_premium, add_joinchannel, get_join_channels, remove_joinchannel

bot = Apolex()
from core.Apolex import OWNER_IDS

OWNERS = OWNER_IDS
bot.lavalink_nodes = [{
    "host": "lava.link",
    "port": 80,
    "password": "yash"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "alex"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "alexandra"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "dismusic"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "archduke"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "godking"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "ghost"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "apolex"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "best"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "nodes"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "coder"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "bestnodes"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "jaani"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "toxic"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "connect"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "done"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "vix"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "outlaw"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "rollin"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "quality"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "apx"
}, {
    "host": "lava.link",
    "port": 80,
    "password": "vivox"
}
                      #Can have multiple nodes here
                      ]

# If you want to use spotify search
bot.spotify_credentials = {
    'client_id': '448423745a5841018dd529172f2f124c',
    'client_secret': '21656bd50d22429d95e8ef6ca86b8bba'
}

bot.load_extension('dismusic')

#def source(o):
#s = inspect.getsource(o).split("\n")
#indent = len(s[0]) - len(s[0].lstrip())
#return "\n".join(i[indent:] for i in s)

#source_ = source(discord.gateway.DiscordWebSocket.identify)
#patched = re.sub(r'([\'"]\$browser[\'"]:\s?[\'"]).+([\'"])',
# r"\1Discord Android\2", source_)

#loc = {}
#exec(compile(ast.parse(patched), "<string>", "exec"), discord.gateway.__dict__,
# loc)

#discord.gateway.DiscordWebSocket.identify = loc["identify"]
intents = intents = discord.Intents.all()

#if the above don't work, try with this
#intents = discord.Intents()
#intents.members = True


def is_server_owner(ctx):
    return ctx.message.author.id == ctx.message.author.id == 980361546918162482


owners = OWNER_IDS

intents = discord.Intents.default()
intents.members = True
with open('badges.json') as f:

    owner = [980361546918162482]


@bot.command(aliases=["addb"])
@commands.is_owner()
async def addbadge(ctx, user: discord.Member, *, badge):
    with open("badges.json", "r") as f:
        idk = json.load(f)
    if str(user.id) not in idk:
        idk[str(user.id)] = []
        idk[str(user.id)].append(f"{badge}")
        await ctx.reply(f" Added badge {badge} to {user}.",
                        mention_author=False)
    elif str(user.id) in idk:
        idk[str(user.id)].append(f"{badge}")
        await ctx.reply(f" Added badge {badge} to {user}.",
                        mention_author=False)
    with open("badges.json", "w") as f:
        json.dump(idk, f, indent=4)


@bot.command(aliases=["profile"])
async def badges(ctx, member: discord.Member):
    user = member or ctx.author
    with open("badges.json", "r") as f:
        idk = json.load(f)
    if str(user.id) not in idk:
        await ctx.reply(f"{user} Have no badges.", mention_author=False)
    elif str(user.id) in idk:
        embed = discord.Embed(
            color=discord.Colour(0x800000),
            title=
            "<a:ex_ownership:1010957204477722654> Rexxy Achivements <a:ex_ownership:1010957204477722654> ",
            description=f"{user.mention}'s badges\n\n\n")
        for bd in idk[str(user.id)]:
            embed.description += f"{bd}\n"
        embed.set_footer(text=f"Requested by {ctx.author.name}",
                         icon_url=bot.user.avatar.url)
        embed.set_thumbnail(url=bot.user.avatar.url)
        await ctx.reply(embed=embed, mention_author=False)


@bot.command(aliases=['rb'])
#@bot.command(aliases=['rbadges'])
async def removebadge(ctx, user: discord.User = None):
    if ctx.author.id in OWNERS:
        if user is None:
            await ctx.reply("You must specify a user to remove badge.")
            return
        with open('badges.json', 'r') as f:
            badges = json.load(f)
        try:
            if str(user.id) in badges:
                badges.pop(str(user.id))

                with open('badges.json', 'w') as f:
                    json.dump(badges, f, indent=4)

                await ctx.reply(f"Removed badge of {user}")
        except KeyError:
            await ctx.reply("This user has no badge.")


cd = commands.CooldownMapping.from_cooldown(6, 7, commands.BucketType.user)


@bot.listen("on_message")
async def antispamm_event(message):
    with open("antispamconf.json", "r") as f:
        idk = json.load(f)
    bucket = cd.get_bucket(message)
    retry = bucket.update_rate_limit()
    if retry:
        if str(message.guild.id) not in idk or idk[str(
                message.guild.id)] == "disable":
            return
        elif str(message.guild.id) in idk and idk[str(
                message.guild.id)] == "enable":
            if message.author.guild_permissions.manage_messages:
                return
            else:
                if message.author.id != bot.user.id:
                    duration = datetime.timedelta(minutes=20)
                    await message.author.timeout_for(duration,
                                                     reason="Spamming")
                    await message.channel.send(embed=discord.Embed(
                        color=discord.Colour(0x800000),
                        description=
                        f'Muted {message.author.mention} for spamming.'))


@bot.command()
@commands.has_permissions(administrator=True)
async def antispam(ctx, toggle):
    with open("antispamconf.json", "r") as f:
        idk = json.load(f)
    if toggle == "enable":
        idk[str(ctx.guild.id)] = "enable"
        await ctx.reply(embed=discord.Embed(color=discord.Colour(0x800000),
                                            description=f"Enabled anti spam"))
    elif toggle == "disable":
        idk[str(ctx.guild.id)] = "disable"
        await ctx.reply(embed=discord.Embed(color=discord.Colour(0x800000),
                                            description=f"Disabled anti spam"))
    else:
        await ctx.reply(embed=discord.Embed(
            color=discord.Colour(0x800000),
            description=f"Invalid argument, it should be enable / disable."))
    with open('antispamconf.json', 'w') as f:
        json.dump(idk, f, indent=4)


class verificationb(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label='Verify',
                       style=discord.ButtonStyle.grey,
                       custom_id=f'verifybutton')
    async def button_callback(self, button, interaction: discord.Interaction):
        with open("verification.json", "r") as f:
            idk = json.load(f)
        role_id = idk[str(interaction.guild.id)]["role"]
        role = interaction.guild.get_role(role_id)
        try:
            await interaction.user.add_roles(role, reason="Verification")
            await interaction.response.send_message(f" successfully verified",
                                                    ephemeral=True)
        except:
            await interaction.response.send_message(f"failed to verify",
                                                    ephemeral=True)


@bot.command()
@commands.has_permissions(administrator=True)
async def verification(ctx, verification_channel: discord.TextChannel,
                       verified_role: discord.Role):
    with open("verification.json", "r") as f:
        idk = json.load(f)
    mm = {"channel": verification_channel.id, "role": verified_role.id}
    idk[str(ctx.guild.id)] = mm
    await ctx.reply(embed=discord.Embed(color=discord.Colour(0x800000),
                                        description=f"successfully setuped"))
    await verification_channel.send(embed=discord.Embed(
        color=discord.Colour(0x800000),
        description=
        f"To access {ctx.guild.name}, you need to pass the verification first, Press the verify button below.",
        title=f"Verification").set_footer(text="Rexxy",
                                          icon_url=bot.user.avatar),
                                    view=verificationb())
    with open('verification.json', 'w') as f:
        json.dump(idk, f, indent=4)
      
class selfrole2(discord.ui.View):
  def __init__(self):
    super().__init__(timeout=None)

  @discord.ui.button(label='1', style=discord.ButtonStyle.grey, custom_id=f'ReactionRole')
  async def button_callback(self, button, interaction: discord.Interaction):
   with open("randx.json", "r") as f:
    idk = json.load(f)
   role_id = idk[str(interaction.guild.id)]["role"]
   role = interaction.guild.get_role(role_id)
   try:
      await interaction.user.add_roles(role, reason="ReactionRole")
      await interaction.response.send_message(f" Successfully Added", ephemeral=True)
   except:
       await interaction.response.send_message(f"Failed to Add", ephemeral=True)
      
@bot.command()
@commands.has_permissions(administrator=True)
async def selfrole(ctx, selfrole_channel:discord.TextChannel, self_role:discord.Role):
    with open("randx.json", "r") as f:
          idk = json.load(f)
    mm = {"channel": selfrole_channel.id, "role": self_role.id}
    idk[str(ctx.guild.id)] = mm
    await ctx.reply(embed=discord.Embed(color=discord.Colour(0x2f3136), description=f"successfully setuped"))
    await selfrole_channel.send(embed=discord.Embed(color=discord.Colour(0x2f3136), description=f"To get the roles, here is the role list\n\n`[1]` - {self_role.mention}\n\nThanku for using me", title=f"Role Menu").set_footer(text="Powered by Apolex", icon_url=bot.user.avatar), view=selfrole2())
    with open('randx.json', 'w') as f:
      json.dump(idk, f, indent=4)


import headers


async def antilinks_event(message):
    duration = datetime.timedelta(minutes=5)
    with open("antilinkconf.json", "r") as f:
        conf = json.load(f)
    if str(message.guild.id) not in conf or conf[str(
            message.guild.id)] == "disable":
        return
    elif str(message.guild.id) in conf and conf[str(
            message.guild.id)] == "enable":
        if message.author.guild_permissions.manage_messages:
            return
        else:
            if "https://discord.gg/" in message.content:
                httpx.delete(
                    f"https://discord.com/api/v9/channels/{message.channel.id}/messages/{message.id}",
                    headers=headers)
                await message.author.timeout_for(
                    duration, reason="Sending server invite")
                await message.channel.send(
                    f'Muted {message.author.mention} for advertising.')
                return
            if "discord.gg" in message.content:
                httpx.delete(
                    f"https://discord.com/api/v9/channels/{message.channel.id}/messages/{message.id}",
                    headers=headers)
                await message.author.timeout_for(
                    duration, reason="Sending server invite")
                await message.channel.send(
                    f'Muted {message.author.mention} for sending link')
            if "https://" in message.content:
                httpx.delete(
                    f"https://discord.com/api/v9/channels/{message.channel.id}/messages/{message.id}",
                    headers=headers)
                await message.author.timeout_for(duration,
                                                 reason="Sending links")
                await message.channel.send(
                    f'Muted {message.author.mention} for advertising.')
            if "http://" in message.content:
                httpx.delete(
                    f"https://discord.com/api/v9/channels/{message.channel.id}/messages/{message.id}",
                    headers=headers)
                await message.author.timeout_for(duration,
                                                 reason="Sending links")
                await message.channel.send(
                    f'Muted {message.author.mention} for advertising.')
            if "Discord.gg" in message.content:
                httpx.delete(
                    f"https://discord.com/api/v9/channels/{message.channel.id}/messages/{message.id}",
                    headers=headers)
                await message.author.timeout_for(
                    duration, reason="Sending server invite")
                await message.channel.send(
                    f'Muted {message.author.mention} for advertising.')
                if "discord.com/invite" in message.content:
                    httpx.delete(
                        f"https://discord.com/api/v9/channels/{message.channel.id}/messages/{message.id}",
                        headers=headers)
                    await message.author.timeout_for(
                        duration, reason="Sending server invite")
                    await message.channel.send(
                        f'Muted {message.author.mention} for advertising.')


@bot.command()
@commands.has_permissions(administrator=True)
async def antilink(ctx, toggle):
    with open("antilinkconf.json", "r") as f:
        idk = json.load(f)
    if toggle == "enable":
        idk[str(ctx.guild.id)] = "enable"
        await ctx.reply(f"Done | Enabled antilink / anti discord promotions.",
                        mention_author=False)
    elif toggle == "disable":
        idk[str(ctx.guild.id)] = "disable"
        await ctx.reply(f"Done | Disabled antilink / anti discord promotions.",
                        mention_author=False)
    else:
        await ctx.reply(
            f"Wrong | Invalid argument, it should be enable / disable.",
            mention_author=False)
    with open('antilinkconf.json', 'w') as f:
        json.dump(idk, f, indent=4)


bot.add_listener(antilinks_event, 'on_message')


@bot.command(aliases=['fuckoff', 'jana', "getlost", "ghumkeaa"])
@commands.has_permissions(ban_members=True)
async def hackban(ctx, userid="Nonexd", reason="None specified"):

    if len(str(userid)) != 18:
        embed = discord.Embed(title="hackban",
                              description=f"\nCommand usage : ,<aliases> <id>",
                              color=0x800000,
                              timestamp=ctx.message.created_at)
        #embed.set_thumbnail(url=bot.user.avatar_url)
        embed.set_footer(text="Made with love<3")
        await ctx.send(embed=embed)
    else:

        try:

            user = await bot.fetch_user(int(userid))
            await ctx.guild.ban(user, reason=reason)
            embed = discord.Embed(
                title="Rexxy",
                description=
                f"\n<a:correcto:1010967933511536671> | Banned :  {user.name}#{user.discriminator}\n ID -{userid}",
                color=0x800000,
                timestamp=ctx.message.created_at)
            #embed.set_thumbnail(url=bot.user.avatar_url)
            embed.set_footer(text="Rexxy")
            await ctx.send(embed=embed)

        except Exception as errorbanning:
            embed = discord.Embed(
                title="GetLost",
                description=f"\nError Banning {userid}\n{errorbanning}",
                color=0x800000,
                timestamp=ctx.message.created_at)
            embed.set_thumbnail(url=bot.user.avatar_url)
            embed.set_footer(text="made with love<3")
            await ctx.send(embed=embed)


@bot.command()
async def greet(ctx):
    if ctx.author.guild_permissions.manage_channels:
        servers = get_greet()
        valid = False
        try:
            for i in servers:
                if i[2] == ctx.channel.id:
                    remove_greet(ctx.channel.id)
                    embed = discord.Embed(
                        description=
                        f" Disabled greet on: {ctx.channel.mention}",
                        color=0x800000)
                    embed.set_author(name=f"{ctx.author}",
                                     icon_url=f"{bot.user.avatar.url_url}")
                    embed.set_footer(text=f"Rexxy ")
                    await ctx.channel.send(embed=embed)
                    valid = True
                    break
        except:
            valid = False
        if valid == False:
            add_greet(ctx.guild.id, ctx.channel.id)
            embed = discord.Embed(
                description=f" Enabled greet on: {ctx.channel.mention}",
                color=0x800000)
            embed.set_author(name=f"{ctx.author}",
                             icon_url=f"{bot.user.avatar.url}")
            embed.set_footer(text=f"Rexxy")
            await ctx.channel.send(embed=embed)
    else:
        embed1 = discord.Embed(
            description=
            f" you have insufficient permissions to execute this command.",
            color=0x800000)
        embed1.set_author(name=f"{ctx.author}",
                          icon_url=f"{bot.user.avatar.url}")
        embed1.add_field(name="**Missing permission(s)**",
                         value="Manage Channels")
        embed1.set_footer(text=f"Rexxy ")
        await ctx.channel.send(embed=embed1)


@bot.event
async def on_member_join(member):
    servers = get_greet()
    for i in servers:
        if i[1] == member.guild.id:
            try:
                channel = bot.get_channel(i[2])
                msg = await channel.send(
                    f"**<a:welcome1:1015603474215477308><a:welcome2:1015604292788424705>Welcome {member.mention} in {member.guild.name}<a:welcome1:1015603474215477308><a:welcome2:1015604292788424705>**",
                    delete_after=10)
                await asyncio.sleep(i[5])
                await msg.delete()
            except:
                pass


@bot.command()
async def greetdel(ctx, amount):
    if ctx.author.guild_permissions.manage_channels:
        servers = get_greet()
        valid = False
        try:
            for i in servers:
                if i[2] == ctx.channel.id:
                    update_greet(ctx.channel.id, int(amount))
                    embed = discord.Embed(
                        description=f"  greet enabled on: {amount}s",
                        color=0x800000)
                    embed.set_author(name=f"{ctx.author}",
                                     icon_url=f"{bot.user.avatar.url}")
                    embed.set_footer(text=f"Rexxy")
                    await ctx.channel.send(embed=embed)
                    valid = True
                    break
        except:
            valid = False
        if valid == False:
            embed = discord.Embed(
                description=f" Greet command is not enabled on this channel",
                color=0x800000)
            embed.set_author(name=f"{ctx.author}",
                             icon_url=f"{bot.user.avatar.url}")
            embed.set_footer(text=f"Rexxy ")
            await ctx.channel.send(embed=embed)


@bot.command()
@commands.has_permissions(administrator=True)
async def joinchannel(ctx, channel=None):
    if channel is None:
        embed2 = discord.Embed(
            description=f"Mention channel. | $joinchannel #channel",
            color=0x800000)
        embed2.set_author(name=f"{ctx.author}",
                          icon_url=f"{bot.user.avatar.url}")
        embed2.set_footer(text=f"Rexxy ")
        await ctx.channel.send(embed=embed2)
    servers = get_join_channels()
    valid = False
    a = channel.replace("<#", "").replace(">", "")
    for i in servers:
        if i[2] == int(a):
            valid = True
            break
    if valid == False:
        add_joinchannel(ctx.guild.id, int(a))
        embed = discord.Embed(description=f"Enabled joinchannel on: {channel}",
                              color=0x800000)
        embed.set_author(name=f"{ctx.author}",
                         icon_url=f"{bot.user.avatar.url}")
        embed.set_footer(text=f"Sexxy")
        await ctx.channel.send(embed=embed)
    else:
        embed1 = discord.Embed(
            description=
            f"Join channel is already enabled. | write $removejoinchannel to remove it.",
            color=0x800000)
        embed1.set_author(name=f"{ctx.author}",
                          icon_url=f"{bot.user.avatar.url}")
        embed1.set_footer(text=f"Rexxy")
        await ctx.channel.send(embed=embed1)


@bot.command()
@commands.has_permissions(administrator=True)
async def removejoinchannel(ctx, channel):
    if channel is None:
        embed2 = discord.Embed(
            description=f"Mention channel. | $joinchannel #channel",
            color=0x800000)
        embed2.set_author(name=f"{ctx.author}",
                          icon_url=f"{bot.user.avatar.url}")
        embed2.set_footer(text=f"rexxy")
        await ctx.channel.send(embed=embed2)
    a = channel.replace("<#", "").replace(">", "")
    remove_joinchannel(int(a))
    embed = discord.Embed(description=f" Removed join channel.",
                          color=0x800000)
    embed.set_author(name=f"{ctx.author}", icon_url=f"{bot.user.avatar.url}")
    embed.set_footer(text=f"Rexxy")
    await ctx.channel.send(embed=embed)


@bot.command()
async def autostatus(ctx, status=None, role: discord.Role = None):
    if ctx.message.author.guild_permissions.administrator:
        if status is None:
            embed2 = discord.Embed(
                description=f" incorrect usage | $autostatus <status> <role>",
                color=0x800000)
            embed2.set_author(name=f"{ctx.author}",
                              icon_url=f"{bot.user.avatar.url}")
            embed2.set_footer(text=f"Rexxy")
            await ctx.channel.send(embed=embed2)
        valid = False
        servers = all_servers()
        #tells if it is enabled
        for i in servers:
            if i[1] == ctx.guild.id:
                valid = True
                break
        serverss = get_premiumservers()
        #checks if it's premium server
        is_server = False
        for i in serverss:
            if i[1] == int(ctx.guild.id):
                is_server = True
                break
        if valid == False and is_server == True:
            add_server(ctx.guild.id, status, role.id)
            embed = discord.Embed(
                description=
                f" Enabled autostatus on: {ctx.guild.name} | write `$givestatus` to give role for status",
                color=0x800000)
            embed.set_author(name=f"{ctx.author}",
                             icon_url=f"{bot.user.avatar.url}")
            embed.set_footer(text=f"rexxy")
            await ctx.channel.send(embed=embed)
        elif valid == True:
            embed1 = discord.Embed(
                description=f" autostatus is already turned on",
                color=0x800000)
            embed1.set_author(name=f"{ctx.author}",
                              icon_url=f"{bot.user.avatar.url}")
            embed1.set_footer(text=f"rexxy")
            await ctx.channel.send(embed=embed1)
        elif is_server == False:
            embed1 = discord.Embed(description=f" This server is not premium.",
                                   color=0x800000)
            embed1.set_author(name=f"{ctx.author}",
                              icon_url=f"{bot.user.avatar.url}")
            embed1.set_footer(text=f"rexxy")
            await ctx.channel.send(embed=embed1)
    else:
        await ctx.channel.send("you should have admin permisson to do that!")


@bot.command()
async def givestatus(ctx):
    if ctx.message.author.guild_permissions.administrator:
        valid = False
        servers = get_premiumservers()
        for i in servers:
            if i[1] == ctx.guild.id:
                valid = True
                break
        serverss = get_premiumservers()
        is_server = False
        for i in serverss:
            if i[1] == int(ctx.guild.id):
                is_server = True
                break
        if valid == True and is_server == True:
            s = 0
            server = get_server(ctx.guild.id)
            role = ctx.guild.get_role(int(server[3]))
            for user in ctx.guild.members:
                if server[2] in str(user.activity):
                    await user.add_roles(role)
                    s += 1
            await ctx.channel.send(f"gave {s} users `{role}` role!")
    else:
        await ctx.channel.send("you should have admin permisson to do that!")


@bot.command()
async def removeautostatus(ctx):
    if ctx.message.author.guild_permissions.administrator:
        valid = False
        servers = all_servers()
        for i in servers:
            if i[1] != ctx.guild.id:
                valid = False
            else:
                valid = True
                break
        if valid == True:
            delete_server(ctx.guild.id)
            embed = discord.Embed(
                description=
                " Disabled autostatus on: {ctx.guild.name} | write `$autostatus` to enable this fether",
                color=0x800000)
            embed.set_author(name=f"{ctx.author}",
                             icon_url=bot.user.avatar.url)
            embed.set_footer(text=f"Rexxy")
            await ctx.channel.send(embed=embed)
        else:
            embed1 = discord.Embed(
                description=f" autostatus is already turned off",
                color=0x800000)
            embed1.set_author(name=f"{ctx.author}",
                              icon_url=bot.user.avatar.url)
            embed1.set_footer(text=f"")
            await ctx.channel.send(embed=embed1)

    else:
        await ctx.channel.send("you should have admin permisson to do that!")


@bot.command()
async def redeem(ctx, code):
    servers = get_premiumservers()
    is_server = False
    for i in servers:
        if i[1] == int(ctx.guild.id):
            is_server = True
            break
    codes = get_codes()
    valid = False
    if is_server == False:
        for i in codes:
            if str(i[1]) == str(code):
                remove_code(str(code))
                add_premium(int(ctx.guild.id))
                embed = discord.Embed(
                    description=f" Enabled premium on: {ctx.guild.name}",
                    color=0x800000)
                embed.set_author(name=f"{ctx.author}",
                                 icon_url=bot.user.avatar.url)
                embed.set_footer(text=f"")
                await ctx.channel.send(embed=embed)
                valid = True
        if valid == False:
            embed = discord.Embed(description=f"Unknown code.", color=0x800000)
            embed.set_author(name=f"{ctx.author}",
                             icon_url=bot.user.avatar.url)
            embed.set_footer(text=f" ")
            await ctx.channel.send(embed=embed)
    else:
        embed = discord.Embed(description=f" This server already has premium.",
                              color=0x800000)
        embed.set_author(name=f"{ctx.author}", icon_url=bot.user.avatar.url)
        embed.set_footer(text=f"")
        await ctx.channel.send(embed=embed)


@bot.command(aliases=["Dcode"])
async def devcode(ctx):
    if ctx.author.id == 876726757112291378:
        a = [
            "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
            "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"
        ]
        result = random.choices(a, k=5)
        codes = ""
        for i in result:
            codes += i
        add_code(codes)
        await ctx.author.send(f"**your code is:** `{codes}`")


@bot.command(aliases=["Pcode"])
async def premiumcodes(ctx):
    if ctx.author.id == 876726757112291378:
        codes = get_codes()
        await ctx.author.send(f"**Codes left:** `{codes}`")


@bot.command()
async def economy(ctx):
    embed = discord.Embed(description=f"`balance` `beg` `bet` `daily` `share`",
                          color=0x800000)
    embed.set_author(name=f"- Economy Commands", url=bot.user.avatar.url)
    embed.set_footer(text=f"")
    await ctx.channel.send(embed=embed)


@bot.command()
async def cash(ctx, user: discord.Member = None):
    users = get_users()
    if user is None:
        member = ctx.author
    if user is not None:
        member = user
    is_done = False
    for i in users:
        if i[1] == member.id:
            embed = discord.Embed(color=0x800000)
            embed.set_author(name=f" Bot Economy", url=bot.user.avatar.url)
            embed.add_field(
                name="Balance",
                value=
                f"{member.name} has <:coins:999513931922014229> **{i[2]}**")
            embed.set_footer(text=f"Rexxy")
            await ctx.channel.send(embed=embed)
            is_done = True
            break
    if is_done == False:
        add_user(member.id)
        embed = discord.Embed(color=0x800000)
        embed.set_author(name=f"Economy", url=bot.user.avatar.url)
        embed.add_field(
            name="Balance",
            value=f"{member.name} has <:coins:999513931922014229> **0**")
        embed.set_footer(text=f"Rexxy")
        await ctx.channel.send(embed=embed)


@bot.command()
@commands.cooldown(1, 30, commands.BucketType.user)
async def work(ctx):
    users = get_users()
    money = random.randint(1000, 20000)
    is_done = False
    for i in users:
        if i[1] == ctx.author.id:
            add_money(ctx.author.id, money)
            embed = discord.Embed(color=0x800000)
            embed.set_author(name=f"Economy", url="")
            embed.add_field(
                name="Working!",
                value=f"*you earned <:coins:999513931922014229> {money} ")
            embed.set_footer(text=f"Rexxy")
            await ctx.channel.send(embed=embed)
            is_done = True
            break
    if is_done == False:
        add_user(ctx.author.id)
        add_money(ctx.author.id, money)
        embed = discord.Embed(color=0x800000)
        embed.set_author(name=f"Economy", url=bot.user.avatar.url)
        embed.add_field(
            name="Woring!",
            value=f"**you earned <:coins:999513931922014229> {money} ")
        embed.set_footer(text=f"Rexxy")
        await ctx.channel.send(embed=embed)


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.errors.CommandOnCooldown):
        return await ctx.send(
            'The command **{}** is still on cooldown for {:.2f}'.format(
                ctx.command.name, error.retry_after))


@bot.command()
async def send(ctx, user: discord.Member, money):
    users = get_users()
    is_done = False
    for i in users:
        if i[1] == user.id:
            is_done = True
    if is_done == False:
        add_user(user.id)
        is_done = True
    #if is_done1 and i[2] >= money and is_done:
    userf = get_info(int(ctx.author.id))
    if userf[2] > int(money):
        share_money(int(ctx.author.id), int(user.id), int(money))
        embed = discord.Embed(color=0x800000)
        embed.set_author(name=f"Economy", url=bot.user.avatar.url)
        embed.add_field(
            name="<:mmiruswaitingforreply:867071884268797962> Sharing!",
            value=
            f"You shared <:coins:999513931922014229> {money} coins to {user.mention}"
        )
        embed.set_footer(text=f"Rexxy")
        await ctx.channel.send(embed=embed)
    else:
        ctx.send(f"{ctx.author.mention}, You have insufficient balance!")


@bot.command()
async def addmoney(ctx, user: discord.Member, money):
    if ctx.author.id == 980361546918162482:
        users = get_users()
        is_done = False
        for i in users:
            if i[1] == user.id:
                is_done = True
        if is_done == False:
            add_user(user.id)
            is_done = True
        #if is_done1 and i[2] >= money and is_done:
        give_money(int(user.id), int(money))
        embed = discord.Embed(color=0x800000)
        embed.set_author(name=f"Rexxy Bot Economy Commands",
                         url=f"{bot.user.avatar.url.url}")
        embed.add_field(
            name="Sharing.",
            value=
            f"You Shared <:coins:1012045551568687124> {money} coins to {user.mention}"
        )
        embed.set_footer(text=f"Rexxy Since 2021!")
        await ctx.channel.send(embed=embed)


@bot.command()
@commands.cooldown(1, 190000, commands.BucketType.user)
async def daily(ctx):
    users = get_users()
    is_done = False
    for i in users:
        if i[1] == ctx.author.id:
            add_money(ctx.author.id, 50000)
            embed = discord.Embed(color=0x800000)
            embed.set_author(name=f"Economy", url="")
            embed.add_field(
                name="Daily Reward",
                value=f"You got <:coins:999513931922014229> **50000**")
            embed.set_footer(text=f"Rexxy")
            await ctx.channel.send(embed=embed)
            is_done = True
            break
    if is_done == False:
        add_user(ctx.author.id)
        add_money(ctx.author.id, 5000)


@bot.command()
@commands.cooldown(1, 30, commands.BucketType.user)
async def bet(ctx, amount=None):
    if str(amount) == None:
        embed2 = discord.Embed(color=0x800000)
        embed2.set_author(name=f"Economy", url=bot.user.avatar.url)
        embed2.add_field(name="Usage", value=f",bet <amount>")
        embed2.set_footer(text=f"Rexxy ")
        await ctx.channel.send(embed=embed2)
    else:
        users = get_users()
        is_done = False
        listx = ["lose", "win"]
        result = random.choice(listx)
        for i in users:
            if i[1] == ctx.author.id and int(i[2]) > int(amount):
                if result == "lose":
                    remove_money(ctx.author.id, int(amount))
                    embed = discord.Embed(color=0x800000)
                    embed.set_author(name=f"Economy", url=bot.user.avatar.url)
                    embed.add_field(
                        name="You Lost!",
                        value=
                        f"<:emcry:999516758232801440> Awww.. you lost the bet <:coins:999513931922014229> **{amount}**"
                    )
                    embed.set_footer(text=f"Rexxy")
                    await ctx.channel.send(embed=embed)
                    is_done = True
                    break
                else:
                    give_money(ctx.author.id, int(amount) * 1)
                    embed1 = discord.Embed(color=0x800000)
                    embed1.set_author(name=f"Economy", url="")
                    embed1.add_field(
                        name="You Won!",
                        value=
                        f"🎉  Congrats you have won the bet <:coins:999513931922014229> **{int(amount)*1}**"
                    )
                    embed1.set_footer(text=f"Rexxy")
                    await ctx.channel.send(embed=embed1)
                    is_done = True
                    break

    if is_done == False:
        add_user(ctx.author.id)


@bot.command()
async def join(ctx):
    channel = ctx.author.voice.channel
    await channel.connect()
    await ctx.send('joined')


@bot.command()
async def leave(ctx):
    await ctx.voice_client.disconnect()
    await ctx.send('leaved')


@bot.command()
@commands.has_permissions(administrator=True)
async def voicemove(ctx, channel: discord.VoiceChannel = None):
    if channel == None:
        await ctx.reply('Mention a channel to move users to!')
    if ctx.author.voice:
        channell = ctx.author.voice.channel
        members = channell.members
        for m in members:
            await m.move_to(channel)
        await ctx.reply(f"Moved all users to {channel.mention}")
    if ctx.author.voice is None:
        await ctx.reply(
            'You need to be connected to the channel from where you want to move everyone.'
        )


@commands.cooldown(3, 10, commands.BucketType.user)
@bot.command(aliases=["massunban"])
@commands.has_permissions(administrator=True)
async def unbanalll(ctx):
    guild = ctx.guild
    banlist = await guild.bans()
    await ctx.reply('**Unbanning {} members**'.format(len(banlist)))
    for users in banlist:
        await ctx.guild.unban(user=users.user, reason=f"By {ctx.author}")


@bot.command(
    aliases=["log", "logs", "audit", "audit-logs", "audit-log", "auditlogs"])
@commands.has_permissions(view_audit_log=True)
@commands.cooldown(1, 12, commands.BucketType.user)
@commands.guild_only()
async def auditlog(ctx, lmt: int):
    if lmt >= 31:
        await ctx.reply(
            "Action rejected, you are not allowed to fetch more than `30` entries.",
            mention_author=False)
        return
    idk = []
    str = ""
    async for entry in ctx.guild.audit_logs(limit=lmt):
        idk.append(f'''User: `{entry.user}`
Action: `{entry.action}`
Target: `{entry.target}`
Reason: `{entry.reason}`\n\n''')
    for n in idk:
        str += n
    str = str.replace("AuditLogAction.", "")
    embed = discord.Embed(title=f"AUDIT LOGS",
                          description=f">>> {str}",
                          color=0x800000)
    embed.set_footer(text=f"Audit Log Actions")
    await ctx.reply(embed=embed, mention_author=False)


@bot.command()
async def unhideall(ctx):
    for x in ctx.guild.channels:
        await x.set_permissions(ctx.guild.default_role, view_channel=True)


@commands.has_guild_permissions(manage_roles=True)
@bot.command()
async def hideall(ctx):
    for x in ctx.guild.channels:
        await x.set_permissions(ctx.guild.default_role, view_channel=False)


@commands.cooldown(3, 300, commands.BucketType.user)
@commands.has_permissions(administrator=True)
@bot.command(
    name="unlockall",
    description=
    "Unlocks the server. | Warning: this unlocks every channel for the everyone role.",
    usage="unlockall")
@commands.has_permissions(administrator=True)
@commands.cooldown(1, 5, commands.BucketType.channel)
async def unlockall(ctx, server: discord.Guild = None, *, reason=None):

    await ctx.message.delete()

    if server is None: server = ctx.guild

    try:

        for channel in server.channels:

            await channel.set_permissions(
                ctx.guild.default_role,
                overwrite=discord.PermissionOverwrite(send_messages=True),
                reason=reason)

        await ctx.send(f"**{server}** has been unlocked.\nReason: `{reason}`")

    except:

        await ctx.send(f"```**Failed to unlock, {server}**```")

    else:

        pass


@bot.command(name="lockall",
             description="Locks down the server.",
             usage="lockall")
@commands.has_permissions(administrator=True)
@commands.cooldown(1, 5, commands.BucketType.channel)
async def lockall(ctx, server: discord.Guild = None, *, reason=None):

    await ctx.message.delete()

    if server is None: server = ctx.guild

    try:

        for channel in server.channels:

            await channel.set_permissions(
                ctx.guild.default_role,
                overwrite=discord.PermissionOverwrite(send_messages=False),
                reason=reason)

        await ctx.send(f"**{server}** has been locked.\nReason: `{reason}`")

    except:

        await ctx.send(f"```**Failed to lockdown, {server}.**```")

    else:

        pass


#cls()

#@unwhitelist.error
#async def unwhitelist_error(ctx, error):
# if isinstance(error, commands.CheckFailure):
# await ctx.reply("Sorry but only the guild owner can unwhitelist!")

#embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/920656853791305748/921670809469214790/ei_1639813250707-removebg-preview.png")
#embed.set_footer(text="flank :P")

#embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/9


@bot.command(alaises=['premium-user'])
async def premium_user(ctx, member: discord.Member):
    with open('whitelisted.json', 'r') as i:
        whitelisted = json.load(i)
        guild = ctx.guild
        if str(member.id) in whitelisted[str(guild.id)]:
            embed = discord.Embed(
                title=
                f"<a:premium:1010426937426063410> {member.name} Premium's",
                description=
                "> Premium activated: Yes!\n> Premium user: True\n> Premium Expires: Never\nJoin our [server](https://discord.gg/apolex) and be our staff to get premium."
            )
            await ctx.send(embed=embed)
        else:
            embed = discord.Embed(
                title=
                f"<a:premium:1010426937426063410> {member.name} Premium's",
                description=
                "> Premium activated: No!\n> Premium user: False\n> Premium Expires: None\nJoin our [server](https://discord.gg/apolex) and be our staff to get premium."
            )
            await ctx.send(embed=embed)
            await ctx.send("That user dont have any premium plan")


@bot.command(aliases=['add premium'])
async def give_premium(ctx, user: discord.Member = None):
    if ctx.author.id == 983338719622877184 or 876726757112291378 or 980361546918162482:
        if user == None:
            return await ctx.send("Specify a member to give premium plan")

        with open('whitelisted.json', 'r') as f:
            whitelisted = json.load(f)

        if str(ctx.guild.id) not in whitelisted:
            whitelisted[str(ctx.guild.id)] = []
        else:
            if str(user.id) not in whitelisted[str(ctx.guild.id)]:
                whitelisted[str(ctx.guild.id)].append(str(user.id))
            else:
                await ctx.reply("That user already have a premium plan.")
                return

        with open('whitelisted.json', 'w') as f:
            json.dump(whitelisted, f, indent=4)

        await ctx.reply(
            f"<a:premium:1010426937426063410> Added premium to {user}")


@bot.command()
@commands.guild_only()
@commands.has_permissions(manage_channels=True)
async def hide(ctx, channel: discord.TextChannel = None):
    #if pforp == True:
    #await ctx.reply("Command execution cancelled | P4P mode is enabled.", mention_author=False)
    # return None
    if channel == None:
        channel = ctx.channel
        overwrite = ctx.channel.overwrites_for(ctx.guild.default_role)
        overwrite.read_messages = False
        await channel.set_permissions(
            ctx.guild.default_role,
            overwrite=overwrite,
            reason=
            f"Action issued by {ctx.author.name}#{ctx.author.discriminator}")
        await ctx.reply(
            f' | <#{channel.id}> is now hidden from the default role.',
            mention_author=False)


@bot.command()
@commands.guild_only()
@commands.has_permissions(manage_channels=True)
async def unhide(ctx, channel: discord.TextChannel = None):
    #if pforp == True:
    #  await ctx.reply("Command execution cancelled | P4P mode is enabled.")
    #return None
    if channel == None:
        channel = ctx.channel
        overwrite = ctx.channel.overwrites_for(ctx.guild.default_role)
        overwrite.read_messages = True
        await channel.set_permissions(
            ctx.guild.default_role,
            overwrite=overwrite,
            reason=
            f"Action issued by {ctx.author.name}#{ctx.author.discriminator}")
        await ctx.reply(
            f' | <#{channel.id}> is now visible to the default role.',
            mention_author=False)


@bot.command()
async def whh(ctx):
    await ctx.send("hii")


#@bot.event
#async def on_member_remove(member):
#  guild = member.guild
#  logs = await guild.audit_logs(
#     limit=1,
#     after=datetime.datetime.now() - datetime.timedelta(minutes=2),
#     action=discord.AuditLogAction.member_prune).flatten()
# logs = logs[0]
#  reason = "zenox | Anti Prune"
#  await logs.user.ban(reason=f"{reason}")


@bot.command()
async def antialt(ctx, turn):
    if turn == "off":
        try:
            data = getConfig(ctx.guild.id)
            if ctx.author.id == ctx.guild.owner.id:
                loading = await ctx.send("Setting up the Anti Alt Off...")
                data = getConfig(ctx.guild.id)
                data["antinew"] = False
                updateConfig(ctx.guild.id, data)
                await loading.delete()
                embed = discord.Embed(
                    title="Setup successfully",
                    description=
                    f"I have successfully set the Anti Alt Acc feature Off.\n\n",
                    colour=discord.Colour.blue())
                await ctx.send(embed=embed)
            else:
                await ctx.send("Only the owner can use this command!")
        except:
            print("na")
    elif turn == "on":
        try:
            data = getConfig(ctx.guild.id)
            if ctx.author.id == ctx.guild.owner.id:
                loading = await ctx.send("Setting up the Anti Alt Acc...")
                data = getConfig(ctx.guild.id)
                data["antinew"] = True
                updateConfig(ctx.guild.id, data)
                await loading.delete()
                embed = discord.Embed(
                    title="Setup successfully",
                    description=
                    f"I have successfully setup the Anti New Acc feature.\n\n",
                    colour=discord.Colour.blue())
                await ctx.send(embed=embed)
            else:
                await ctx.send("Only the owner can use this command!")
        except:
            print("na")
    else:
        await ctx.send("pls send in on or off")


@bot.command(aliases=["bug", "bugreport", "fixbug"])
async def report(ctx, *, desc=None):
    if desc == None:
        await ctx.send("PLEASE SUPPLY THE BUG INFORMATION !")
    else:
        await ctx.send("THANKS FOR REPORTING THE BUG. IT WILL BE FIXED SOON !")
        link = await ctx.channel.create_invite(max_age=300)
        channel = bot.get_channel(1011662902110982254)
        embed = discord.Embed(
            title="BUG REPORT",
            description=
            f"`REPORTED BY - `\n{ctx.author.name}\n\n`I'D-`\n{ctx.message.author.id}\n\n`BUG -`\n{desc}\n\n`BUG FOUND IN - `\n{ctx.message.guild.name}\n\n`SERVER INVITE -`\n{link}",
            color=0x800000)
        await channel.send(embed=embed)


@bot.command(aliases=["sg", "feedback"])
async def suggestion(ctx, *, desc=None):
    if desc == None:
        await ctx.send("PLEASE SUPPLY THE BUG INFORMATIO !")
    else:
        await ctx.send("THANKS FOR YOUR SUGGESTION !")
        link = await ctx.channel.create_invite(max_age=300)
        channel = bot.get_channel(1011662902958227456)
        embed = discord.Embed(
            title="SUGGESTION",
            description=
            f"`SUGGEST BY - `\n{ctx.author.name}\n\n`I'D-`\n{ctx.message.author.id}\n\n`CMNT -`\n{desc}\n\n`SUG. FROM  - `\n{ctx.message.guild.name}\n\n`SERVER INVITE -`\n{link}",
            color=0x800000)
        await channel.send(embed=embed)


@bot.command()
async def vote(ctx):
    embed = discord.Embed(
        description=
        f"""[vote me](https://top.gg/bot/1011674034339053648)\n[support server](https://discord.gg/rexxy)""",
        color=0x800000)
    # embed.set_author(name=f"{ctx.author}",icon_url=f"{bot.user.avatar.url_url}")
    embed.set_footer(text=f"Rexxy since 2022")
    await ctx.send(embed=embed)


@bot.command()
async def ping(ctx):
    embed = discord.Embed(
        description=
        f"<a:network:1012060763487228005> Pong! {round(bot.latency * 1000)}ms",
        color=0x800000)
    #  embed.set_author(name=f"{member.avatar}")                          embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009061985406681128/1010647053606600704/d9a20b959d2a7260408cb53dc9486a2b.jpg")
    embed.set_footer(text="")
    await ctx.channel.send(embed=embed)


OWNER_IDS = 980361546918162482


def is_bot_owner(ctx):
    return ctx.message.author.id in owners


@bot.command()
@commands.check(is_bot_owner)
async def servers(ctx):
    activeservers = bot.guilds
    sum = 0
    for guild in activeservers:
        await ctx.send(
            f"name: {guild.name} | member count: {guild.member_count}, id = {guild.id}"
        )


@bot.command()
@commands.check(is_bot_owner)
async def getinv(ctx, guild_id: int):
    guild = bot.get_guild(guild_id)
    channel = guild.channels[0]
    invitelink = await channel.create_invite(max_age=300)
    await ctx.send(embed=discord.Embed(
        title="INVITE LINK",
        description=f"INVITE LINK OF REQUESTED SERVER\n\n{invitelink}",
        color=0x800000,
        timestamp=ctx.message.created_at))


@bot.command(aliases=["em"])
@commands.has_permissions(embed_links=True)
async def embed(ctx, *, mesg=f"Format : embed [words]"):

    await ctx.message.delete()
    embed = discord.Embed(description=mesg, color=0x800000)
    embed.set_footer(text="")
    await ctx.send(embed=embed)


@bot.command()
@commands.check(is_bot_owner)
async def adminservers(ctx):
    await ctx.message.delete()
    admins = []
    for guild in bot.guilds:
        if guild.me.guild_permissions.administrator:
            admins.append(discord.utils.escape_markdown(guild.name))
    adminPermServers = f"**Servers with Admin ({len(admins)}):**\n{admins}"
    await ctx.send(adminPermServers)


@bot.command()
async def botlst(ctx):
    await ctx.message.delete()
    bots = []
    for member in ctx.guild.members:
        if member.bot:
            bots.append(
                str(member.name).replace("`", "\`").replace("*", "\*").replace(
                    "_", "\_") + "#" + member.discriminator)
    bottiez = f"**Bots ({len(bots)}):**\n{', '.join(bots)}"
    await ctx.send(bottiez)


@bot.command()
@commands.check(is_bot_owner)
async def leaveg(ctx, *, guild: discord.Guild = None):
    #if ctx.author.id in is_bot_owner:
    if guild is None:
        print("Please enter the guild ID!")  # No guild found
        return
    await guild.leave()  # Guild found
    await ctx.send(f"I left: {guild.name}!")


#@bot.command()
#@commands.check(is_bot_owner)
#async def leaveg(ctx, *, guild_name):
##  guild = discord.utils.get(bot.guilds, name=guild_name)# Get the guild by name
# if guild is None:
#   print("No guild with that name found.") # No guild found
#   return
#  await guild.leave() # Guild found
# await ctx.send(f"I left: {guild.name}!")


@bot.command(aliases=["channelcreate"])
@commands.has_permissions(manage_channels=True)
async def addchannel(ctx, *names):
    for name in names:
        await ctx.guild.create_text_channel(name)
        await ctx.send(
            f'<a:correcto:1010967933511536671> | {name} has been created')
    #    await sleep(1)


@bot.command(aliases=['deletechannel'])
@commands.has_permissions(manage_channels=True)
async def delchannel(ctx, *channels: discord.TextChannel):
    for ch in channels:
        await ch.delete()
        await ctx.send(
            f' <a:correcto:1010967933511536671> | {ch.name} has been deleted')
    # await sleep(1)


@bot.command(aliases=["listen"])
@commands.check(is_bot_owner)
async def listening(ctx, *, message):
    await ctx.send("Rexxy | Changing Status.....")
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.listening,
        name=message,
    ))
    await ctx.send("Listening created!")


@bot.command(aliases=["watch"])
@commands.check(is_bot_owner)
async def watching(ctx, *, message):
    await ctx.send("Rexxy | Changing Status.....")
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.watching,
        name=message,
    ))
    await ctx.send("watching created!")


@bot.command(aliases=["plays"])
@commands.check(is_bot_owner)
async def playing(ctx, *, message):
    await ctx.send("Rexxy | Changing Status.....")
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.playing,
        name=message,
    ))
    await ctx.send("playing created!")


@bot.command(aliases=["stream"])
@commands.check(is_bot_owner)
async def streaming(ctx, *, message):
    await ctx.send("Rexxy | Changing Status.....")
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.streaming,
        name=message,
    ))
    await ctx.send("streaming created!")


@bot.command()
@commands.has_permissions(administrator=True)
async def nuke(ctx):

    channel_position = ctx.channel.position
    new_chan = await ctx.channel.clone()
    await ctx.channel.delete()
    await new_chan.edit(position=channel_position)

    embed = discord.Embed(
        title="",
        description=
        f"<#{new_chan.id}> -  Nuked by {ctx.author}",
        color=0x800000,
        timestamp=ctx.message.created_at)
    #embed.set_image(url="https://tenor.com/view/fire-boom-explosion-smoke-gif-17085230")
    embed.set_footer(text="")
    await new_chan.send(embed=embed)


@bot.command(aliases=["userbanner"])
async def baner(ctx, user: discord.Member):
    if user == None:
        user = ctx.author
    bid = await bot.http.request(
        discord.http.Route("GET", "/users/{uid}", uid=user.id))
    banner_id = bid["banner"]

    if banner_id:
        embed = discord.Embed(color=0x800000)
        embed.set_author(name=f"{user.name}'s Banner")
        embed.set_image(
            url=
            f"https://cdn.discordapp.com/banners/{user.id}/{banner_id}?size=1024"
        )
        await ctx.reply(embed=embed)
    else:
        embed = discord.Embed(title='Rexxy',
                              color=0x800000,
                              description=f"**`User has no banner`**")
        await ctx.reply(embed=embed)


@bot.event
async def on_ready():
    os.system("clear")
    for guild in bot.guilds:
        files = os.listdir('Settings')
        if guild.name + '.txt' in files:
            print('File for ' + guild.name + ' already exists')
        if guild.name + '.txt' not in files:
            newFile = open('./Settings/' + guild.name + '.txt', 'w+')
            newFile.write('./Settings/' + guild.name + '\n')
            newFile.close()
            with open('./Settings/' + guild.name + '.txt', "w") as f:
                json.dump(
                    {
                        "Antichannel-create": False,
                        "Antichannel-delete": False,
                        "Antirole-delete": False,
                        "Antirole-create": False,
                        "Antiban": False,
                        "Antirole-update": False,
                        "Antiwebhook": False,
                    },
                    f,
                    default=str)
                os.system("clear")
                print('File for ' + guild.name + ' created')
    guilds = 0
    mem = 0
    for guild in bot.guilds:
        guilds += 1
        for member in guild.members:
            mem += 1
    await bot.change_presence(
        status=discord.Status.dnd,
        activity=discord.Game(name=f'[!] - Watching {guilds} Servers!'))


@bot.command()
async def update(ctx):
    if ctx.author == ctx.guild.owner:
        guild = ctx.guild
        os.remove('./Settings/' + ctx.guild.name + '.txt')
        files = os.listdir('Settings')
        if guild.name + '.txt' in files:
            print('File for ' + guild.name + ' already exists')

        if guild.name + '.txt' not in files:
            newFile = open('./Settings/' + guild.name + '.txt', 'w+')
            newFile.write('./Settings/' + guild.name + '\n')
            newFile.close()
            with open('./Settings/' + guild.name + '.txt', "w") as f:
                json.dump(
                    {
                        "Antichannel-create": False,
                        "Antichannel-delete": False,
                        "Antirole-delete": False,
                        "Antirole-create": False,
                        "Antiban": False,
                        "Antirole-update": False,
                        "Antiwebhook": False,
                    },
                    f,
                    default=str)
            print('File for ' + guild.name + ' created')
            await ctx.send(embed=discord.Embed(
                title="REXXY | BOT UPDATION",
                description=
                "BOT UPDATED !\nPLEASE TURN ON ALL THE SECURITY SETTINGS ",
                color=0,
                timestamp=ctx.message.created_at))
    else:
        pass


@bot.command()
async def update_guild(ctx, guild_id):
    if ctx.author == ctx.guild.owner:
        guild = bot.get_guild(guild_id)
        os.remove('./Settings/' + guild.name + '.txt')
        files = os.listdir('Settings')
        if guild.name + '.txt' in files:
            print('File for ' + guild.name + ' already exists')

        if guild.name + '.txt' not in files:
            newFile = open('./Settings/' + guild.name + '.txt', 'w+')
            newFile.write('./Settings/' + guild.name + '\n')
            newFile.close()
            with open('./Settings/' + guild.name + '.txt', "w") as f:
                json.dump(
                    {
                        "Antichannel-create": False,
                        "Antichannel-delete": False,
                        "Antirole-delete": False,
                        "Antirole-create": False,
                        "Antiban": False,
                        "Antirole-update": False,
                        "Antiwebhook": False,
                    },
                    f,
                    default=str)
            print('File for ' + guild.name + ' created')
            await ctx.send(embed=discord.Embed(
                title="REXXY | BOT UPDATION",
                description=
                f"BOT UPDATED !\nGUILD NAME - {guild.name}\nPLEASE TURN ON ALL THE SECURITY SETTINGS ",
                color=0x800000,
                timestamp=ctx.message.created_at))
    else:
        pass


@bot.event
async def on_guild_join(guild: discord.guild):
    guild_name = guild.name
    channel = bot.get_channel(1012683278257508352)
    log_channel = bot.get_channel(1012683278257508352)
    channel = guild.text_channels[0]
    invlink = await channel.create_invite(unique=True)
    embed = discord.Embed(title='Rexxy Bot',
                          color=0x800000,
                          description=f'Joined New Server!')
    embed.add_field(name='Server Name', value=f'**`{guild.name}`**')
    embed.add_field(name='Server Owner', value=f'**`{guild.owner}`**')
    embed.add_field(name='Server Members', value=f'**`{len(guild.members)}`**')
    embed.set_thumbnail(
        url=
        'https://images-ext-2.discordapp.net/external/abcouJ0LuBFpwCVTmu6FsmMA91mv2ydKowSvfT8Ucls/%3Fsize%3D1024/https/cdn.discordapp.com/avatars/938345769486925885/45f394d67e8b29550abe2677a929420e.webp?width=701&height=701'
    )
    embed.add_field(name="Link Of Server", value=f'{invlink}')
    await log_channel.send(embed=embed)
    # await channel.send(embed=discord.Embed(title="BOT JOINED",description=f"`BOT INVITED IN - `\n{guild_name}\n\n`GUILD ID - `\n{guild.id}\n`members` {len(guild.members)}",color=0))
    # embed.add_field(text=f"channel = guild.text_channels[0]
    # invlink = await channel.create_invite(unique = True"))
    files = os.listdir('Settings')
    if guild.name + '.txt' in files:
        print('File for ' + guild.name + ' already exists')

    if guild.name + '.txt' not in files:
        newFile = open('./Settings/' + guild.name + '.txt', 'w+')
        newFile.write('./Settings/' + guild.name + '\n')
        newFile.close()
        with open('./Settings/' + guild.name + '.txt', "w") as f:
            json.dump(
                {
                    "Antichannel-create": False,
                    "Antichannel-delete": False,
                    "Antirole-delete": False,
                    "Antirole-create": False,
                    "Antiban": False,
                    "Antirole-update": False,
                    "Antiwebhook": False,
                },
                f,
                default=str)
        print('File for ' + guild.name + ' created')


@bot.command()
async def security(ctx):
    files = os.listdir('Settings')
    if ctx.guild.name + '.txt' in files:
        print('File for ' + ctx.guild.name + ' already exists')

    if ctx.guild.name + '.txt' not in files:
        newFile = open('./Settings/' + ctx.guild.name + '.txt', 'w+')
        newFile.write('./Settings/' + ctx.guild.name + '\n')
        newFile.close()
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            json.dump(
                {
                    "Antichannel-create": False,
                    "Antichannel-delete": False,
                    "Antirole-delete": False,
                    "Antirole-create": False,
                    "Antiban": False,
                    "Antirole-update": False,
                    "Antiwebhook": False,
                },
                f,
                default=str)
        print('File for ' + ctx.guild.name + ' created')
    with open('./Settings/' + ctx.guild.name + '.txt') as f:
        anti = json.load(f)

# Antibot = anti.get('Antibot')
#Antirole_add = anti.get('Antirole-add')
    Antiwebhook = anti.get('Antiwebhook')
    Antirole_update = anti.get('Antirole-update')
    Antiban = anti.get('Antiban')
    # Antikick = anti.get('Antikick')
    Antirole_create = anti.get('Antirole-create')
    Antirole_delete = anti.get('Antirole-delete')
    Antichannel_create = anti.get('Antichannel-create')
    Antichannel_delete = anti.get('Antichannel-delete')
    #  if Antibot == True:
    #  value = "<:Icons_correct:1005809876922007582>"
    # if Antibot == False:
    #   value = "<:wrong:1003345816326516756>"
    #if Antirole_add == True:
    #  valuera = "<:Icons_correct:1005809876922007582>"
    #if Antirole_add == False:
    #  valuera = "<:wrong:1003345816326516756>"
    if Antiwebhook == True:
        valuew = "<:Icons_correct:1012050271888752790>"
    if Antiwebhook == False:
        valuew = "<:wrong:1003345816326516756>"
    if Antiban == True:
        valueb = "<:Icons_correct:1012050271888752790>"
    if Antiban == False:
        valueb = "<:wrong:1003345816326516756>"
    #if Antikick == True:
    # valuek = "<:Icons_correct:1005809876922007582>"
    #if Antikick == False:
    #  valuek = "<:wrong:1003345816326516756>"
    if Antirole_create == True:
        valuerc = "<:Icons_correct:1012050271888752790>"
    if Antirole_create == False:
        valuerc = "<:wrong:1003345816326516756>"
    if Antirole_delete == True:
        valuerd = "<:Icons_correct:1012050271888752790>"
    if Antirole_delete == False:
        valuerd = "<:wrong:1003345816326516756>"
    if Antichannel_delete == True:
        valuecd = "<:Icons_correct:1012050271888752790>"
    if Antirole_update == False:
        valueru = "<:wrong:1003345816326516756>"
    if Antirole_update == True:
        valueru = "<:Icons_correct:1012050271888752790>"
    if Antichannel_delete == False:
        valuecd = "<:wrong:1003345816326516756>"
    if Antichannel_create == True:
        valuecc = "<:Icons_correct:1012050271888752790>"
    if Antichannel_create == False:
        valuecc = "<:wrong:1003345816326516756>"
    embed = discord.Embed(
        title="<:security:1007911659769180180> REXXY | ANTINUKE",
        description=
        f"\nANTI-BAN\n{valueb}\nANTI-ROLE CREATE\n{valuerc}\nANTI-ROLE DELETE\n{valuerd}\nANTI-CHANNEL CREATE\n{valuecc}\nANTI-CHANNEL DELETE\n{valuecd}\nANTI-ROLE UPDATE\n{valueru}\nANTI-WEBHOOK\n{valuew}",
        color=0x800000,
        timestamp=ctx.message.created_at)
    await ctx.send(embed=embed)


@bot.command()
async def antichannel(ctx):
    embed = discord.Embed(
        title="<:G_Security:1010927348180340816> ANTI-CHANNEL",
        description=
        "ANTI-CHANNEL CREATE\n`.antichannelcreate`\n\nANTI-CHANNEL DELETE\n`.antichanneldelete`",
        color=0x26FBFF,
        timestamp=ctx.message.created_at)
    await ctx.channel.send(embed=embed)


@bot.command()
async def antirole(ctx):
    embed = discord.Embed(
        title="<:G_Security:1010927348180340816> ANTI-ROLE",
        description=
        "ANTI-ROLE CREATE\n`$antirolecreate`\n\nANTI-ROLE DELETE\n`$antiroledelete`\n\nANTI-ROLE UPDATE\n`$antiroleupdate`\n",
        color=0x800000,
        timestamp=ctx.message.created_at)
    await ctx.channel.send(embed=embed)


@bot.command()
@commands.has_permissions(administrator=True)
async def antinuke(ctx, panicmodeparameter=None):
    if panicmodeparameter == None:
        embed = discord.Embed(
            title="<:G_Security:1010927348180340816> ANTINUKE",
            description=
            "TO ENABLE ANTINUKE\n`!antinuke on/true`\n\nTO DISABLE ANTINUKE\n`!antinuke off/false`",
            color=0x800000,
            timestamp=ctx.message.created_at)
        await ctx.send(embed=embed)
    if str(panicmodeparameter) == "true" or str(panicmodeparameter) == "on":
        os.remove('./Settings/' + ctx.guild.name + '.txt')
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            newFile = open('./Settings/' + ctx.guild.name + '.txt', 'w+')
            newFile.write('./Settings/' + ctx.guild.name + '\n')
            newFile.close()
            with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
                json.dump(
                    {
                        "Antichannel-create": True,
                        "Antichannel-delete": True,
                        "Antirole-delete": True,
                        "Antirole-create": True,
                        "Antiban": True,
                        "Antirole-update": True,
                        "Antiwebhook": True,
                    },
                    f,
                    default=str)
                await ctx.send(embed=discord.Embed(
                    title="<:G_Security:1010927348180340816> ANTINUKE",
                    description=
                    f"ANTINUKE Enabled\n<:Icons_correct:1012050271888752790>",
                    color=0x800000,
                    timestamp=ctx.message.created_at))
    elif str(panicmodeparameter) == 'false' or str(
            panicmodeparameter) == "off":
        os.remove('./Settings/' + ctx.guild.name + '.txt')
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            newFile = open('./Settings/' + ctx.guild.name + '.txt', 'w+')
            newFile.write('./Settings/' + ctx.guild.name + '\n')
            newFile.close()
            with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
                json.dump(
                    {
                        "Antichannel-create": False,
                        "Antichannel-delete": False,
                        "Antirole-delete": False,
                        "Antirole-create": False,
                        "Antiban": False,
                        "Antirole-update": False,
                        "Antiwebhook": False,
                    },
                    f,
                    default=str)
        await ctx.send(embed=discord.Embed(
            title="<:G_Security:1010927348180340816> ANTINUKE",
            description=
            f"ANTINUKE Disabled\n<:Icons_correct:1012050271888752790>",
            color=0x800000,
            timestamp=ctx.message.created_at))


#@bot.command()
#@commands.has_permissions(administrator=True)
#async def antibot(ctx, antibotparameter=None):
# if antibotparameter == None:
#embed = discord.Embed(title="<:security:1007911659769180180> ANTI-BOT",description="TO ENABLE ANTI-BOT\n'$antibot on/true`\n\nTO DISABLE ANTI-BOT\n`$antibot off/false`",color=0x010101,timestamp=ctx.message.created_at)
# await ctx.send(embed=embed)
#if str(antibotparameter) == "true" or str(antibotparameter) == "on":
# with open('./Settings/'+ctx.guild.name+'.txt',"r") as f:
#  lines = f.readlines()
# for i in range(len(lines)):
# if "Antibot" in lines[i]:
#  info = lines[i].split(',')
#  info[0] = ('{"Antibot": true')
# lines[i] = ",".join(info)
#with open('./Settings/'+ctx.guild.name+'.txt',"w") as f:
#  f.writelines(lines)
#   await ctx.send(embed=discord.Embed(title="<:security:1007911659769180180> ANTI-BOT",description=f"Anti-Bot Enabled\n<:Icons_correct:1005809876922007582>",color=0x010101,timestamp=ctx.message.created_at))
# elif str(antibotparameter)== 'false' or str(antibotparameter) == "off":
# with open('./Settings/'+ctx.guild.name+'.txt',"r") as f:
#  lines = f.readlines()
#for i in range(len(lines)):
#if "Antibot" in lines[i]:
#  info = lines[i].split(',')
#  info[0] = ('{"Antibot": false')
#  lines[i] = ",".join(info)
# with open('./Settings/'+ctx.guild.name+'.txt',"w") as f:
#  f.writelines(lines)
# await ctx.send(embed=discord.Embed(title="<:security:1007911659769180180> ANTI-BOT",description=f"Anti-Bot Disabled\n<:wrong:1003345816326516756>",color=0x010101,timestamp=ctx.message.created_at))


@bot.command()
@commands.has_permissions(administrator=True)
async def antichannelcreate(ctx, antichannel_createparameter=None):
    if antichannel_createparameter == None:
        embed = discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-CHANNEL",
            description=
            "TO ENABLE ANTI-CHANNEL CREATE\n`$antichannelcreate on/true`\n\nTO DISABLE ANTI-CHANNEL CREATE\n`$antichannelcreate off/false`",
            color=0x800000,
            timestamp=ctx.message.created_at)
        await ctx.send(embed=embed)
    if str(antichannel_createparameter) == "true" or str(
            antichannel_createparameter) == "on":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antichannel-create" in lines[i]:
                info = lines[i].split(',')
                info[1] = (' "Antichannel-create": true')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)
            await ctx.send(embed=discord.Embed(
                title="<:G_Security:1010927348180340816> ANTI-CHANNEL",
                description=
                f"Anti-Channel Create Enabled\n<:Icons_correct:1012050271888752790>",
                color=0x800000,
                timestamp=ctx.message.created_at))
    elif str(antichannel_createparameter) == 'false' or str(
            antichannel_createparameter) == "off":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antichannel-create" in lines[i]:
                info = lines[i].split(',')
                info[1] = (' "Antichannel-create": false')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)
        await ctx.send(embed=discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-CHANNEL",
            description=
            f"Anti-Channel Create Disabled\n<:Icons_correct:1012050271888752790>",
            color=0x800000,
            timestamp=ctx.message.created_at))


@bot.command()
@commands.has_permissions(administrator=True)
async def antichanneldelete(ctx, antichannel_deleteparameter=None):
    if antichannel_deleteparameter == None:
        embed = discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-CHANNEL",
            description=
            "TO ENABLE ANTI-CHANNEL DELETE\n`$antichanneldelete on/true`\n\nTO DISABLE ANTI-CHANNEL DELETE\n`$antichanneldelete off/false`",
            color=0x800000,
            timestamp=ctx.message.created_at)
        await ctx.send(embed=embed)
    if str(antichannel_deleteparameter) == "true" or str(
            antichannel_deleteparameter) == "on":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as fd:
            lines = fd.readlines()
        for i in range(len(lines)):
            if "Antichannel-delete" in lines[i]:
                info = lines[i].split(',')
                info[2] = (' "Antichannel-delete": true')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as fd:
            fd.writelines(lines)
            await ctx.send(embed=discord.Embed(
                title="<:G_Security:1010927348180340816> ANTI-CHANNEL",
                description=
                f"Anti-Channel Delete Enabled\n<:Icons_correct:1012050271888752790>",
                color=0x800000,
                timestamp=ctx.message.created_at))
    elif str(antichannel_deleteparameter) == 'false' or str(
            antichannel_deleteparameter) == "off":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as fd:
            lines = fd.readlines()
        for i in range(len(lines)):
            if "Antichannel-delete" in lines[i]:
                info = lines[i].split(',')
                info[2] = (' "Antichannel-delete": false')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as fd:
            fd.writelines(lines)
        await ctx.send(embed=discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-CHANNEL",
            description=
            f"Anti-Channel Delete Disabled\n<:Icons_correct:1012050271888752790>",
            color=0x800000,
            timestamp=ctx.message.created_at))


@bot.command()
@commands.has_permissions(administrator=True)
async def antiroledelete(ctx, antirole_deleteparameter=None):
    if antirole_deleteparameter == None:
        embed = discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-ROLE",
            description=
            "TO ENABLE ANTI-ROLE DELETE\n`$antiroledelete on/true`\n\nTO DISABLE ANTI-ROLE DELETE\n`$antiroledelete off/false`",
            color=0x800000,
            timestamp=ctx.message.created_at)
        await ctx.send(embed=embed)
    if str(antirole_deleteparameter) == "true" or str(
            antirole_deleteparameter) == "on":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antirole-delete" in lines[i]:
                info = lines[i].split(',')
                info[3] = (' "Antirole-delete": true')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)
            await ctx.send(embed=discord.Embed(
                title="<:G_Security:1010927348180340816> ANTI-ROLE",
                description=
                f"Anti-Role Delete Enabled\n<:Icons_correct:1012050271888752790>",
                color=0x800000,
                timestamp=ctx.message.created_at))
    elif str(antirole_deleteparameter) == 'false' or str(
            antirole_deleteparameter) == "off":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antirole-delete" in lines[i]:
                info = lines[i].split(',')
                info[3] = (' "Antirole-delete": false')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)
        await ctx.send(embed=discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-ROLE",
            description=
            f"Anti-role Delete Disabled\n<:Icons_correct:1012050271888752790>",
            color=0x800000,
            timestamp=ctx.message.created_at))


@bot.command()
@commands.has_permissions(administrator=True)
async def antirolecreate(ctx, antirole_createparameter=None):
    if antirole_createparameter == None:
        embed = discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-ROLE",
            description=
            "TO ENABLE ANTI-ROLE CREATE\n`$antirolecreate on/true`\n\nTO DISABLE ANTI-ROLE CREATE\n`$antirolecreate off/false`",
            color=0x800000,
            timestamp=ctx.message.created_at)
        await ctx.send(embed=embed)
    if str(antirole_createparameter) == "true" or str(
            antirole_createparameter) == "on":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antirole-create" in lines[i]:
                info = lines[i].split(',')
                info[4] = (' "Antirole-create": true')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)
            await ctx.send(embed=discord.Embed(
                title="<:G_Security:1010927348180340816> ANTI-ROLE",
                description=
                f"Anti-Role Create Enabled\n<:Icons_correct:1012050271888752790>",
                color=0x800000,
                timestamp=ctx.message.created_at))
    elif str(antirole_createparameter) == 'false' or str(
            antirole_createparameter) == "off":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antirole-create" in lines[i]:
                info = lines[i].split(',')
                info[4] = (' "Antirole-create": false')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)
        await ctx.send(embed=discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-ROLE",
            description=
            f"Anti-Role Create Disabled\n<:Icons_correct:1012050271888752790>",
            color=0x800000,
            timestamp=ctx.message.created_at))


@bot.command()
@commands.has_permissions(administrator=True)
async def antiban(ctx, antibanparameter=None):
    if antibanparameter == None:
        embed = discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-BAN",
            description=
            "TO ENABLE ANTI-BAN\n`$antiban on/true`\n\nTO DISABLE ANTI-BAN\n`$antiban off/false`",
            color=0x800000,
            timestamp=ctx.message.created_at)
        await ctx.send(embed=embed)
    if str(antibanparameter) == "true" or str(antibanparameter) == "on":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antiban" in lines[i]:
                info = lines[i].split(',')
                info[6] = (' "Antiban": true')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)
            await ctx.send(embed=discord.Embed(
                title="<:G_Security:1010927348180340816> ANTI-BAN",
                description=
                f"Anti-Ban Enabled\n<:Icons_correct:1012050271888752790>",
                color=0x800000,
                timestamp=ctx.message.created_at))
    elif str(antibanparameter) == 'false' or str(antibanparameter) == "off":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antiban" in lines[i]:
                info = lines[i].split(',')
                info[6] = (' "Antiban": false')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)


@bot.command()
@commands.has_permissions(administrator=True)
async def antiroleupdate(ctx, antirole_updateparameter=None):
    if antirole_updateparameter == None:
        embed = discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-ROLE",
            description=
            "TO ENABLE ANTI-ROLE UPDATE\n`$antiroleupdate on/true`\n\nTO DISABLE ANTI-ROLE UPDATE\n`$antiroleupdate off/false`",
            color=0x800000,
            timestamp=ctx.message.created_at)
        await ctx.send(embed=embed)
    if str(antirole_updateparameter) == "true" or str(
            antirole_updateparameter) == "on":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antirole-update" in lines[i]:
                info = lines[i].split(',')
                info[7] = (' "Antirole-update": true')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)
            await ctx.send(embed=discord.Embed(
                title="<:G_Security:1010927348180340816> ANTI-ROLE",
                description=
                f"Anti-Role Update Enabled\n<:Icons_correct:1012050271888752790>",
                color=0x800000,
                timestamp=ctx.message.created_at))
    elif str(antirole_updateparameter) == 'false' or str(
            antirole_updateparameter) == "off":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antirole-update" in lines[i]:
                info = lines[i].split(',')
                info[7] = (' "Antirole_update": false')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)
        await ctx.send(embed=discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-ROLE",
            description=
            f"Anti-Role Update Disabled\n<:Icons_correct:1012050271888752790>",
            color=0x800000,
            timestamp=ctx.message.created_at))


@bot.command()
@commands.has_permissions(administrator=True)
async def antiwebhook(ctx, antiwebhookparameter=None):
    if antiwebhookparameter == None:
        embed = discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-WEBHOOK",
            description=
            "TO ENABLE ANTI-WEBHOOK\n`$antiwebhook on/true`\n\nTO DISABLE ANTI-WEBHOOK\n`$antiwebhook off/false`",
            color=0x800000,
            timestamp=ctx.message.created_at)
        await ctx.send(embed=embed)
    if str(antiwebhookparameter) == "true" or str(
            antiwebhookparameter) == "on":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antiwebhook" in lines[i]:
                info = lines[i].split(',')
                info[8] = (' "Antiwebhook": true')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)
            await ctx.send(embed=discord.Embed(
                title="<:G_Security:1010927348180340816> ANTI-WEBHOOK",
                description=
                f"Anti-Webhook Enabled\n<:Icons_correct:1012050271888752790>",
                color=0x800000,
                timestamp=ctx.message.created_at))
    elif str(antiwebhookparameter) == 'false' or str(
            antiwebhookparameter) == "off":
        with open('./Settings/' + ctx.guild.name + '.txt', "r") as f:
            lines = f.readlines()
        for i in range(len(lines)):
            if "Antiwebhook" in lines[i]:
                info = lines[i].split(',')
                info[8] = (' "Antiwebhook": false')
                lines[i] = ",".join(info)
        with open('./Settings/' + ctx.guild.name + '.txt', "w") as f:
            f.writelines(lines)
        await ctx.send(embed=discord.Embed(
            title="<:G_Security:1010927348180340816> ANTI-WEBHOOK",
            description=
            f"Anti-Webhook Disabled\n<:Icons_correct:1012050271888752790>",
            color=0x800000,
            timestamp=ctx.message.created_at))


@bot.event
async def on_webhooks_update(channel):
    guild = channel.guild
    with open('./Settings/' + guild.name + '.txt') as f:
        anti = json.load(f)
        Antiwebhook = anti.get('Antiwebhook')
        if Antiwebhook == True:
            try:
                whitelist = []
                guild = channel.guild
                async for i in guild.audit_logs(
                        limit=1, action=discord.AuditLogAction.webhook_create):
                    if i.user.id not in whitelist:
                        print('banned')
                        await guild.ban(i.user, reason=" Anti-Webhook Create")
                        webhooks = await guild.webhooks()
                        for webhook in webhooks:
                            await webhook.delete()
            except Exception as e:
                print(e)


@bot.event
async def on_guild_role_update(role, guild):
    guild = role.guild
    with open('./Settings/' + guild.name + '.txt') as f:
        anti = json.load(f)
        Antirole_update = anti.get('Antichannel-delete')
    if Antirole_update is True:
        try:
            guild = role.guild
            async for i in guild.audit_logs(
                    limit=1, action=discord.AuditLogAction.role_update):
                print('banned')
                await guild.ban(i.user, reason=" Anti-Role Update")
                permissions = discord.Permissions()
            permissions.update(read_messages=True,
                               read_message_history=True,
                               connect=True,
                               speak=True,
                               send_messages=True,
                               ban_members=False,
                               kick_members=False,
                               manage_server=False,
                               administrator=False,
                               manage_webhooks=False,
                               manage_roles=False,
                               manage_channels=False)
            await role.edit(reason="Anti-Role Update", permissions=permissions)
        except Exception as e:
            print(e)


@bot.event
async def on_guild_channel_delete(channel):
    guild = channel.guild
    with open('./Settings/' + guild.name + '.txt') as f:
        anti = json.load(f)
        Antichannel_delete = anti.get('Antichannel-delete')
        if Antichannel_delete is True:
            try:
                guild = channel.guild
                async for i in guild.audit_logs(
                        limit=1, action=discord.AuditLogAction.channel_delete):
                    print('banned')
                    await guild.ban(i.user, reason=" Anti-Channel Delete")
            except Exception as e:
                print(e)


@bot.event
async def on_guild_channel_create(channel):
    guild = channel.guild
    with open('./Settings/' + guild.name + '.txt') as f:
        anti = json.load(f)
        Antichannel_create = anti.get('Antichannel-create')
        if Antichannel_create is True:
            try:
                guild = channel.guild
                async for i in guild.audit_logs(
                        limit=1, action=discord.AuditLogAction.channel_create):
                    print('banned')
                    await guild.ban(i.user, reason=" Anti-Channel Create")
            except Exception as e:
                print(e)


@bot.event
async def on_guild_role_delete(role):
    guild = role.guild
    with open('./Settings/' + guild.name + '.txt') as f:
        anti = json.load(f)
    Antirole_delete = anti.get('Antirole-delete')
    if Antirole_delete is True:
        try:
            guild = role.guild
            async for i in guild.audit_logs(
                    limit=1, action=discord.AuditLogAction.role_delete):
                print('banned')
                await guild.ban(i.user, reason=" Anti-Role Delete")
        except Exception as e:
            print(e)


@bot.event
async def on_guild_role_create(role):
    guild = role.guild
    with open('./Settings/' + guild.name + '.txt') as f:
        anti = json.load(f)
        Antirole_create = anti.get('Antirole-create')
        if Antirole_create is True:
            try:
                guild = role.guild
                async for i in guild.audit_logs(
                        limit=1, action=discord.AuditLogAction.role_create):
                    print("banned - " + i.user.name)
                    await guild.ban(i.user, reason=" Anti-Role Create")
            except Exception as e:
                print(e)


@bot.event
async def on_member_ban(guild: discord.Guild, user: discord.user):
    with open('./Settings/' + guild.name + '.txt') as f:
        anti = json.load(f)
        Antiban = anti.get('Antiban')
        if Antiban is True:
            try:
                async for i in guild.audit_logs(
                        limit=1, action=discord.AuditLogAction.ban):
                    print("banned - ")
                    await guild.ban(i.user, reason=" Anti-Ban")
            except Exception as e:
                print(e)


@bot.event
async def on_guild_join(guild):  #when the bot joins the guild
    with open('prefixes.json', 'r') as f:  #read the prefix.json file
        prefixes = json.load(f)  #load the json file

    prefixes[str(guild.id)] = '!'  #default prefix

    with open('prefixes.json',
              'w') as f:  #write in the prefix.json "message.guild.id": "bl!"
        json.dump(
            prefixes, f,
            indent=4)  #the indent is to make everything look a bit neater


@bot.event
async def on_guild_remove(guild):  #when the bot is removed from the guild
    with open('prefixes.json', 'r') as f:  #read the file
        prefixes = json.load(f)

    prefixes.pop(str(guild.id))  #find the guild.id that bot was removed from

    with open('prefixes.json',
              'w') as f:  #deletes the guild.id as well as its prefix
        json.dump(prefixes, f, indent=4)


@bot.command(aliases=["prefix"])
@commands.has_permissions(administrator=True)
async def setprefix(ctx, prefixx):
    with open("prefixes.json", "r") as f:
        idk = json.load(f)
    if len(prefixx) > 5:
        await ctx.reply(embed=discord.Embed(
            color=discord.Colour(0x800000),
            description=f'Prefix Cannot Exceed More Than 5 Letters'))
    elif len(prefixx) <= 5:
        idk[str(ctx.guild.id)] = prefixx
        await ctx.reply(embed=discord.Embed(
            color=discord.Colour(0x800000),
            description=f'Updated Server Prefix To `{prefixx}`'))
    with open("prefixes.json", "w") as f:
        json.dump(idk, f, indent=4)


#keep_alive()

bot.run(
    'MTAxMTY3NDAzNDMzOTA1MzY0OA.Gd9Hxo.rJeVxRn2LT29-zxXY2pEDZZMZfrHzy9OibPF7k')
